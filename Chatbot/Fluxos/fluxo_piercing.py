from Chatbot.Fluxos.fluxo_base import BaseFlow

class PiercingFlow(BaseFlow):
    def __init__(self):
        super().__init__()
        self.questions = [
            "√ìtimo, a seguir vamos come√ßar o seu agendamento! Qual seu nome completo?",
            "Perfeito. Agora me diga seu CPF:",
            "Qual sua data de nascimento?",
            "Qual sua idade?",
            "Qual seu sexo (masculino, feminino, outro)?",
            "Em qual local voc√™ deseja a perfura√ß√£o?",
            "Informe o dia e hor√°rio desejado para realizar o procedimento.",
            "Voc√™ prefere qual material? Tit√¢nio ou A√ßo Cir√∫rgico?",
            "Agora vamos para algumas perguntas r√°pidas de sa√∫de. Tudo bem? Responda com 'sim' ou 'n√£o'.",
            "Voc√™ √© fumante?",
            "Tem alguma alergia?",
            "Est√° gr√°vida?",
            "Tem hipertens√£o?",
            "Tem herpes?",
            "Tem alergia a rem√©dios?",
            "Tem diabetes?",
            "J√° teve hepatite?",
            "Tem algum problema no cora√ß√£o?",
            "Tem anemia?",
            "Tem depress√£o?",
            "Tem glaucoma?",
            "√â portador(a) de HIV?",
            "Tem alguma doen√ßa de pele?",
            "J√° teve c√¢ncer?",
            "Tem tend√™ncia a queloide?"
        ]
        
        self.validations = {
            4: ["masculino", "feminino", "outro"],
            7: ["tit√¢nio", "a√ßo cir√∫rgico"],
            **{i: ["sim", "n√£o"] for i in range(9, 25)}  # Mantemos s√≥ "n√£o" como padr√£o
        }

    def get_question(self, step):
        return self.questions[step] if step < len(self.questions) else None

    def validate_answer(self, step, answer):
        if step in self.validations:
            # Normaliza a resposta
            normalized_answer = answer.lower().strip().replace("nao", "n√£o")
            return normalized_answer in self.validations[step]
        return True

    def generate_summary(self, answers):
        # Se√ß√£o 1: Dados Pessoais
        personal_data = (
            "üë§ *DADOS PESSOAIS*\n"
            f"‚Ä¢ Nome Completo: {answers[0]}\n"
            f"‚Ä¢ CPF: {answers[1]}\n"
            f"‚Ä¢ Data de Nascimento: {answers[2]} (Idade: {answers[3]})\n"
            f"‚Ä¢ Sexo: {answers[4].capitalize()}\n"
        )
        
        # Se√ß√£o 2: Agendamento
        appointment = (
            "\nüìÖ *AGENDAMENTO*\n"
            f"‚Ä¢ Local da Perfura√ß√£o: {answers[5]}\n"
            f"‚Ä¢ Data/Hor√°rio: {answers[6]}\n"
            f"‚Ä¢ Material Escolhido: {answers[7].capitalize()}\n"
        )
        
        # Se√ß√£o 3: Sa√∫de (formatando respostas SIM/N√ÉO)
        health_questions = [
            "Fumante", "Alergias", "Gravidez", "Hipertens√£o", "Herpes",
            "Alergia a rem√©dios", "Diabetes", "Hepatite", "Problema card√≠aco",
            "Anemia", "Depress√£o", "Glaucoma", "HIV", "Doen√ßa de pele",
            "C√¢ncer", "Tend√™ncia a queloide"
        ]
        
        # Normaliza respostas antes de exibir
        health_responses = "\n".join(
            f"‚Ä¢ {q}: {'‚úÖ Sim' if answers[i+9].lower().replace('nao', 'n√£o') == 'sim' else '‚ùå N√£o'}"
            for i, q in enumerate(health_questions))
        
        health_data = (
            "\nüè• *INFORMA√á√ïES DE SA√öDE*\n"
            f"{health_responses}"
        )
        
        # Rodap√©
        footer = (
            "\n\nüîπ *PR√ìXIMOS PASSOS*\n"
            "üì≤ Voc√™ receber√° uma confirma√ß√£o do agendamento via WhatsApp.\n"
            "üìû D√∫vidas? Chame-nos pelo WhatsApp (+55 69 9397-9351)\n"
            "üíô Agradecemos sua confian√ßa!"
        )
        
        # Montagem final com formata√ß√£o responsiva
        summary = (
            "‚ú® *RESUMO DO AGENDAMENTO* ‚ú®\n\n"
            f"{personal_data}"
            f"{appointment}"
            f"{health_data}"
            f"{footer}"
        )
        
        return summary