from flask import Flask, request
from .Core.whatsapp_api import WhatsAppAPI
from .Core.tempo_sessao import SessionManager
from .Fluxos.fluxo_piercing import PiercingFlow
from .Fluxos.fluxo_queloide import KeloidFlow
from .Fluxos.fluxo_remocao_tattoo import TattooRemovalFlow
from .Fluxos.fluxo_glanuloma import GranulomaFlow
from .Fluxos.fluxo_pierc_preco import PrecoPiercingFlow
from .Fluxos.fluxo_pierc_cuidados import CuidadosPiercingFlow

import threading
import requests
import os
import time
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
whatsapp = WhatsAppAPI()
sessions = SessionManager()

flows = {
    "perfura√ß√£o": PiercingFlow(),
    "queloide": KeloidFlow(),
    "tatuagem": TattooRemovalFlow(),
    "granuloma": GranulomaFlow(),
    "precos_piercing": PrecoPiercingFlow(),
    "cuidados_piercing": CuidadosPiercingFlow()
}

@app.route("/")
def home():
    return "üåô Chatbot Luar Cl√≠nica üåô", 200  #testando se est√° funcionando


@app.route("/webhook", methods=["GET"])
def verify_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    
    if mode == "subscribe" and token == os.getenv("VERIFY_TOKEN"):
        print("‚úÖ Webhook verificado!")
        return challenge, 200
    print("‚ùå Falha na verifica√ß√£o")
    return "Erro na verifica√ß√£o", 403

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print(f"üì© Dados recebidos: {data}")
    
    if data.get("entry"):
        for entry in data["entry"]:
            for change in entry.get("changes", []):
                if messages := change.get("value", {}).get("messages"):
                    for message in messages:
                        if "text" in message:
                            handle_message(message["from"], message["text"]["body"].lower())
    return "OK", 200

def handle_message(phone, message):
    print(f"üìû Mensagem de {phone}: {message}")
    print(f"Estado atual: {sessions.sessions.get(phone)}")

    if phone not in sessions.sessions:
        if message == "1":
            sessions.create_session(phone, "menu")
            whatsapp.send_message(phone, 
                "Escolha alguma das op√ß√µes abaixo: (Atendimento apenas para maiores de 18 anos) \n"
                "1Ô∏è‚É£ Agendar Perfura√ß√£o\n"
                "2Ô∏è‚É£ Agendar Remo√ß√£o de Queloide\n"
                "3Ô∏è‚É£ Agendar Remo√ß√£o de Tatuagem\n"
                "4Ô∏è‚É£ Agendar Tratamento de Granuloma\n"
                "5Ô∏è‚É£ Pre√ßos da Perfura√ß√£o\n"
                "6Ô∏è‚É£ Cuidados p√≥s-perfura√ß√£o"
            )
        else:
            whatsapp.send_message(phone, "Ol√°! Bem-vindo √† Luar Cl√≠nica üåô. Digite *1* para iniciar.")
        return

    if sessions.check_timeout(phone):
        whatsapp.send_message(phone, "‚è±Ô∏è Atendimento encerrado por inatividade.")
        sessions.end_session(phone)
        return

    session = sessions.sessions[phone]

    if session["procedure_type"] == "menu":
        if message in ["1", "2", "3", "4", "5", "6"]:
            procedure_types = {
                "1": "perfura√ß√£o",
                "2": "queloide",
                "3": "tatuagem",
                "4": "granuloma",
                "5": "precos_piercing",
                "6": "cuidados_piercing"
            }
            session["procedure_type"] = procedure_types[message]
            # Fluxos informativos (op√ß√µes 5/6)
            if message in ["5", "6"]:
                flow = flows[session["procedure_type"]]
                whatsapp.send_message(phone, flow.generate_summary([]))
                sessions.end_session(phone)
            else:
                # Fluxos com perguntas (op√ß√µes 1-4)
                session["step"] = 0
                flow = flows[session["procedure_type"]]
                whatsapp.send_message(phone, flow.get_question(0))

        else:
            whatsapp.send_message(phone, 
                "Op√ß√£o inv√°lida. Escolha:\n"
                "1Ô∏è‚É£ Perfura√ß√£o\n"
                "2Ô∏è‚É£ Remo√ß√£o de Queloide\n"
                "3Ô∏è‚É£ Remo√ß√£o de Tatuagem\n"
                "4Ô∏è‚É£ Tratamento de Granuloma\n"
                "5Ô∏è‚É£ Pre√ßos da Perfura√ß√£o\n"
                "6Ô∏è‚É£ Cuidados p√≥s-perfura√ß√£o"
            )
        return

    process_flow(phone, message, session["procedure_type"])

def process_flow(phone, message, flow_type):
    print(f"üîç Processando fluxo {flow_type}")
    flow = flows[flow_type]
    session = sessions.sessions[phone]
    step = session["step"]
    
    if not flow.validate_answer(step, message):
        error_msg = "Resposta inv√°lida."
        if step in flow.validations:
            options = "/".join(flow.validations[step])
            error_msg = f"Por favor, responda com: {options}"
        whatsapp.send_message(phone, error_msg)
        return

    sessions.update_session(phone, message)
    
    if next_question := flow.get_question(session["step"]):
        whatsapp.send_message(phone, next_question)
    else:
        summary = flow.generate_summary(session["answers"])
        whatsapp.send_message(phone, summary)
        sessions.end_session(phone)

def ping():
    requests.get("https://chatbot-luarclinica.onrender.com/webhook")
    threading.Timer(600, ping).start()  # Ping a cada 10 min

ping()  # Iniciar na execu√ß√£o


if __name__ == "__main__": 
    print("üöÄ Iniciando servidor Flask...")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)  
